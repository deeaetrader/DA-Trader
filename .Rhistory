GSPCpc %>%
arrange(change)
# Sorting by worst daily percentage loss
GSPCpc %>%
arrange(perc_change)
# Calculating %change in a new column "perc_change"
# Uses "dplyr" functions: mutate() and %>% (pipe)
GSPCpc <- GSPCdf %>%
select(date, GSPC.Close) %>%
mutate(prev_close = lag(GSPC.Close),
change = GSPC.Close - prev_close,
perc_change = change/prev_close * 100)
GSPCpc
# Sorting by worst daily points loss
GSPCpc %>%
arrange(change)
# Sorting by worst daily percentage loss
GSPCpc %>%
arrange(perc_change)
knitr::opts_chunk$set(echo = TRUE)
GSPCpc %>%
filter(date %in% c("1930-01-03", "1970-01-03", "2020-01-03"))
GSPCpc %>%
filter(date %in% c("1930-01-03", "1970-01-02", "2020-01-03"))
GSPCpc %>%
filter(date %in% c("1930-01-03", "1980-01-02", "2020-01-03"))
GSPCpc %>%
filter(date %in% c("1930-01-03", "1980-01-02", "2020-01-03")) %>%
ggplot(aes(x = as.factor(date), y = GSPC.Close))+
geom_col()
GSPCpc %>%
filter(date %in% c("1930-01-03", "1980-01-02", "2020-01-03")) %>%
ggplot(aes(x = as.factor(date), y = GSPC.Close))+
geom_col()+
theme_minimal()
GSPCpc %>%
filter(date %in% c("1930-01-03", "1980-01-02", "2020-01-03")) %>%
ggplot(aes(x = as.factor(date), y = GSPC.Close))+
geom_col()+
geom_label(mapping = aes(GSPC.Close))+
theme_minimal()
GSPCpc %>%
filter(date %in% c("1930-01-03", "1980-01-02", "2020-01-03")) %>%
ggplot(aes(x = as.factor(date), y = GSPC.Close))+
geom_col()+
geom_label(aes(label = GSPC.Close))+
theme_minimal()
geom_label(aes(label = year(date))+
GSPCpc %>%
filter(date %in% c("1930-01-03", "1980-01-02", "2020-01-03")) %>%
ggplot(aes(x = as.factor(date), y = GSPC.Close))+
geom_col()+
geom_label(aes(label = year(date))+
theme_minimal()
theme_minimal()
GSPCpc %>%
GSPCpc %>%
filter(date %in% c("1930-01-03", "1980-01-02", "2020-01-03")) %>%
ggplot(aes(x = as.factor(date), y = GSPC.Close))+
geom_col()+
geom_label(aes(label = year(date)))+
theme_minimal()
GSPCpc %>%
filter(date %in% c("1930-01-03", "1980-01-02", "2020-01-03")) %>%
ggplot(aes(x = as.factor(date), y = GSPC.Close))+
geom_col()+
geom_label(aes(label = year(date)))+
theme_minimal()
GSPCpc %>%
filter(date %in% c("1930-01-03", "1980-01-02", "2020-01-03")) %>%
ggplot(aes(x = as.factor(date), y = GSPC.Close))+
geom_col()+
geom_label(aes(label = round(GSPC.Close)))+
theme_minimal()
geom_col(show.legend = F)+
GSPCpc %>%
filter(date %in% c("1930-01-03", "1980-01-02", "2020-01-03")) %>%
ggplot(aes(x = as.factor(date), y = GSPC.Close, fill = as.factor(date)))+
geom_col(show.legend = F)+
geom_label(aes(label = round(GSPC.Close)))+
theme_minimal()+
labs(aes(x = year(date), y = "S&P Index", title = "S&P prices throughout history")
GSPCpc %>%
filter(date %in% c("1930-01-03", "1980-01-02", "2020-01-03")) %>%
ggplot(aes(x = as.factor(date), y = GSPC.Close, fill = as.factor(date)))+
geom_col(show.legend = F)+
geom_label(aes(label = round(GSPC.Close)))+
theme_minimal()+
labs(aes(x = year(date)), y = "S&P Index", title = "S&P prices throughout history")
GSPCpc %>%
filter(date %in% c("1930-01-03", "1980-01-02", "2020-01-03")) %>%
ggplot(aes(x = as.factor(date), y = GSPC.Close, fill = as.factor(date)))+
geom_col(show.legend = F)+
geom_label(aes(label = round(GSPC.Close)), show.legend = F)+
theme_minimal()+
labs(aes(x = year(date)), y = "S&P Index", title = "S&P prices throughout history")
GSPCpc %>%
filter(date %in% c("1930-01-03", "1980-01-02", "2020-01-03")) %>%
ggplot(aes(x = as.factor(date), y = GSPC.Close, fill = as.factor(date)))+
geom_col(show.legend = F)+
geom_label(aes(label = round(GSPC.Close)), show.legend = F)+
theme_minimal()+
labs(x = "Date", y = "S&P Index", title = "S&P prices throughout history")
detach("package:dplyr", unload = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Getting stock data from Yahoo (TIME SERIES)
library(quantmod)
getSymbols("^GSPC",
from = "1927-12-01",
to = today(),
src = "yahoo")
# Getting stock data from Yahoo (TIME SERIES)
library(lubridate)
library(quantmod)
getSymbols("^GSPC",
from = "1927-12-01",
to = today(),
src = "yahoo")
head(GSPC)
# Converting TIME SERIES to DATA FRAME first
library(tibble)
library(dplyr)
GSPCdf <- rownames_to_column(as.data.frame(GSPC), var = "date")
GSPCdf
# Calculating %change in a new column "perc_change"
# Uses "dplyr" functions: mutate() and %>% (pipe)
GSPCpc <- GSPCdf %>%
select(date, GSPC.Close) %>%
mutate(prev_close = lag(GSPC.Close),
change = GSPC.Close - prev_close,
perc_change = change/prev_close * 100)
GSPCpc
# Sorting by worst daily points loss
GSPCpc %>%
arrange(change)
# Sorting by worst daily percentage loss
GSPCpc %>%
arrange(perc_change)
knitr::opts_chunk$set(echo = TRUE)
# Cleaning the data
library(readr)
library(lubridate)
library(naniar)
library(dplyr)
raw <- read_csv("US_treasury.csv")
yield <- raw
yield$Date <- mdy(yield$Date)
yield <- yield %>%
rename(mth1 = "1 Mo",
mth2 = "2 Mo",
mth3 = "3 Mo",
mth6 = "6 Mo",
yr1 = "1 Yr",
yr2 = "2 Yr",
yr3 = "3 Yr",
yr5 = "5 Yr",
yr7 = "7 Yr",
yr10 = "10 Yr",
yr20 = "20 Yr",
yr30 = "30 Yr") %>%
replace_with_na(replace = list(mth1 = "N/A",
mth2 = "N/A",
yr20 = "N/A")) %>%
mutate_at(c("mth1", "mth2", "yr20"), as.numeric)
yield
# Feature engineer new columns indicating inversion TRUE or FALSE
# "mth3mth6" means "Is mth3 > mth6?"
# Note that first few columns have NA, but that is expected/
a <- yield[,1]
b <- 2
for(i in 2:(ncol(yield) - 1)){
for(j in (i+1):ncol(yield)){
a[[b]] <- yield[[i]] > yield[[j]]
b <- b + 1
}
}
c <- "Date"
d <- 2
for(i in 2:(ncol(yield) - 1)){
for(j in (i+1):ncol(yield)){
c[d] <- paste0(colnames(yield[,i]),colnames(yield[,j]))
d <- d + 1
}
}
colnames(a) <- c
a
# Merging both "yield" and "a" together into one super table
yield_expand <- yield %>%
inner_join(a, by = "Date")
tail(yield_expand)
# Creating column for summing inversion counts
yield_inv <- yield_expand %>%
mutate(count_invert = rowSums(.[14:79], na.rm = T))
yield_inv %>%
filter(count_invert == max(count_invert))
library(ggplot2)
inv_plot <- yield_inv %>%
ggplot(aes(x = Date, y = count_invert))+
geom_area()
library(quantmod)
getSymbols("SPY",
from = "1990-01-02",
to = "2020-05-15")
library(tibble)
SPY <- rownames_to_column(as.data.frame(SPY), var = "date") %>%
mutate(date = ymd(date))
SPY_plot <- SPY %>%
ggplot(aes(x = date, y = SPY.Adjusted))+
geom_line()
library(gridExtra)
grid.arrange(SPY_plot, inv_plot)
SPY
SPY_plot
getSymbols("SPY",
from = "1990-01-02",
to = "2020-05-15")
SPY
getSymbols("^GSPC",
from = "1990-01-02",
to = "2020-05-15")
library(tibble)
SPY <- rownames_to_column(as.data.frame(GSPC), var = "date") %>%
mutate(date = ymd(date))
SPY
SPY_plot <- SPY %>%
ggplot(aes(x = date, y = SPY.Adjusted))+
geom_line()
library(gridExtra)
grid.arrange(SPY_plot, inv_plot)
library(quantmod)
getSymbols("^GSPC",
from = "1990-01-02",
to = "2020-05-15")
library(tibble)
SPY <- rownames_to_column(as.data.frame(GSPC), var = "date") %>%
mutate(date = ymd(date))
SPY_plot <- SPY %>%
ggplot(aes(x = date, y = SPY.Adjusted))+
geom_line()
library(gridExtra)
grid.arrange(SPY_plot, inv_plot)
library(quantmod)
getSymbols("^GSPC",
from = "1990-01-02",
to = "2020-05-15")
library(tibble)
SPY <- rownames_to_column(as.data.frame(GSPC), var = "date") %>%
mutate(date = ymd(date))
SPY_plot <- SPY %>%
ggplot(aes(x = date, y = GSPC.Adjusted))+
geom_line()
library(gridExtra)
grid.arrange(SPY_plot, inv_plot)
inv_plot
SPY
yield_inv
cbind(SPY$GSPC.Adjusted, yield_inv$count_invert)
SPY
SPY %>%
select(1,7) %>%
mutate(count_invert = yield_inv$count_invert)
yield_inv %>%
filter(Date %in% SPY$date)
yield_inv %>%
filter(Date %in% SPY$date) %>%
select(1,80)
yield_inv %>%
select(1,80) %>%
inner_join(SPY[c(1,7)],)
yield_inv %>%
select(1,80) %>%
inner_join(SPY[c(1,7)], by = c("Date", "date"))
yield_inv %>%
select(1,80) %>%
inner_join(SPY[c(1,7)], by = c("Date" = "date"))
yieldSPY <- yield_inv %>%
select(1,80) %>%
inner_join(SPY[c(1,7)], by = c("Date" = "date"))
yieldSPY
yieldSPY %>%
ggplot(aes(x = Date, y = GSPC.Adjusted, color = count_invert))+
geom_line()
args(geom_line)
yieldSPY %>%
ggplot(aes(x = Date, y = GSPC.Adjusted, color = count_invert))+
geom_line(size = 1)
yieldSPY %>%
ggplot(aes(x = Date, y = GSPC.Adjusted, color = count_invert))+
geom_line(size = 2)
yieldSPY %>%
ggplot(aes(x = Date, y = GSPC.Adjusted, color = count_invert))+
geom_line(size = 2)+
scale_color_gradient(low = "black", high = "red")
yieldSPY %>%
ggplot(aes(x = Date, y = GSPC.Adjusted, color = count_invert))+
geom_line(size = 2)+
scale_color_gradient(low = "black", high = "red")+
theme_minimal()
yieldSPY %>%
ggplot(aes(x = Date, y = GSPC.Adjusted, color = count_invert))+
geom_line(size = 2)+
scale_color_gradient(low = "grey", high = "red")+
theme_minimal()
inv_plot <- yield_inv %>%
ggplot(aes(x = Date, y = count_invert))+
geom_area()
yieldSPY %>%
filter(between(Date, "1995-01-02", "2005-01-02")) %>%
ggplot(aes(x = Date, y = GSPC.Adjusted, color = count_invert))+
geom_line(size = 2)+
scale_color_gradient(low = "grey", high = "red")+
theme_minimal()
yieldSPY %>%
filter(between(Date, "1995-01-02", "2005-01-02"))
yieldSPY
yieldSPY %>%
filter(Date >= "1995-01-02", Date <= "2005-01-02")) %>%
yieldSPY %>%
filter(Date >= "1995-01-02", Date <= "2005-01-02") %>%
ggplot(aes(x = Date, y = GSPC.Adjusted, color = count_invert))+
geom_line(size = 2)+
scale_color_gradient(low = "grey", high = "red")+
theme_minimal()
yieldSPY %>%
filter(Date >= "2005-01-02", Date <= "2010-01-02") %>%
ggplot(aes(x = Date, y = GSPC.Adjusted, color = count_invert))+
geom_line(size = 2)+
scale_color_gradient(low = "grey", high = "red")+
theme_minimal()
yield_inv %>%
filter(count_invert >= 40)
# Creating column for summing inversion counts
yield_inv <- yield_expand %>%
mutate(count_invert = rowSums(.[14:79], na.rm = T))
yield_inv %>%
filter(count_invert >= 45)
yield_inv %>%
filter(count_invert >= 40)
count40 <- yield_inv %>%
filter(count_invert >= 40)
yieldSPY %>%
ggplot(aes(x = Date, y = GSPC.Adjusted, color = count_invert))+
geom_line(size = 2)+
scale_color_gradient(low = "grey", high = "red")+
theme_minimal()+
geom_area(aes(data = count40))
yieldSPY %>%
ggplot(aes(x = Date, y = GSPC.Adjusted, color = count_invert))+
geom_line(size = 2)+
scale_color_gradient(low = "grey", high = "red")+
theme_minimal()+
geom_area(aes(data = count40, x = Date, y = count_invert))
yieldSPY %>%
ggplot(aes(x = Date, y = GSPC.Adjusted, color = count_invert))+
geom_line(size = 2)+
scale_color_gradient(low = "grey", high = "red")+
theme_minimal()
count40
knitr::opts_chunk$set(echo = TRUE)
# Getting stock data from Yahoo (TIME SERIES)
library(lubridate)
library(quantmod)
getSymbols("^GSPC",
from = "1927-12-01",
to = today(),
src = "yahoo")
head(GSPC)
# Converting TIME SERIES to DATA FRAME first
library(tibble)
library(dplyr)
GSPCdf <- rownames_to_column(as.data.frame(GSPC), var = "date")
GSPCdf
# Calculating %change in a new column "perc_change"
# Uses "dplyr" functions: mutate() and %>% (pipe)
GSPCpc <- GSPCdf %>%
select(date, GSPC.Close) %>%
mutate(prev_close = lag(GSPC.Close),
change = GSPC.Close - prev_close,
perc_change = change/prev_close * 100)
GSPCpc
# Sorting by worst daily points loss
GSPCpc %>%
arrange(change)
# Sorting by worst daily percentage loss
GSPCpc %>%
arrange(perc_change)
args(lag)
GSPC15 <- GSPCdf %>%
select(date, GSPC.Close) %>%
mutate(prev_close = lag(GSPC.Close, n = 15L),
change = GSPC.Close - prev_close,
perc_change = change/prev_close * 100)
GSPC15
GSPC15 <- GSPCdf %>%
select(date, GSPC.Close) %>%
mutate(prev_close = lag(GSPC.Close, n = 15L),
change = GSPC.Close - prev_close,
perc_change = change/prev_close * 100) %>%
arrange(perc_change)
GSPC15
library(ggplot2)
# What is the worst 15 day period in history?
library(lubridate)
GSPC15 <- GSPCdf %>%
select(date, GSPC.Close) %>%
mutate(prev_close = lag(GSPC.Close, n = 15L),
change = GSPC.Close - prev_close,
perc_change = change/prev_close * 100,
date = ymd(date)) %>%
arrange(perc_change)
GSPC15
GSPC15 %>%
ggplot(aes(x = date, = perc_change))+
GSPC15 %>%
ggplot(aes(x = date, y = perc_change))+
geom_col()
GSPC15
GSPC15 %>%
ggplot(aes(x = date, y = perc_change))+
geom_line()
GSPCdf <- rownames_to_column(as.data.frame(GSPC), var = "date") %>%
mutate(date = ymd(date))
GSPCdf
# Calculating %change in a new column "perc_change"
# Uses "dplyr" functions: mutate() and %>% (pipe)
GSPCpc <- GSPCdf %>%
select(date, GSPC.Close) %>%
mutate(prev_close = lag(GSPC.Close),
change = GSPC.Close - prev_close,
perc_change = change/prev_close * 100)
GSPCpc
# Sorting by worst daily points loss
GSPCpc %>%
arrange(change)
GSPCpc %>%
ggplot(aes(x = date, y = change))+
geom_line()
GSPCpc %>%
ggplot(aes(x = date, y = change, color = change))+
geom_line()
GSPCpc %>%
ggplot(aes(x = date, y = change, color = abs(change)))+
geom_line()
GSPCpc %>%
ggplot(aes(x = date, y = change, color = abs(change)))+
geom_line()+
theme_minimal()+
scale_color_gradient(low = "grey", high = "red")
GSPCpc %>%
ggplot(aes(x = date, y = change, color = abs(change)))+
geom_line()+
theme_minimal()+
scale_color_gradient(low = "grey", high = "red")+
labs(title = "Single day points changes in S&P")
GSPCpc %>%
ggplot(aes(x = date, y = perc_change, color = abs(change)))+
geom_line()+
theme_minimal()+
scale_color_gradient(low = "grey", high = "red")+
labs(title = "Single day points changes in S&P")
GSPCpc %>%
ggplot(aes(x = date, y = perc_change, color = abs(perc_change)))+
geom_line()+
theme_minimal()+
scale_color_gradient(low = "grey", high = "red")+
labs(title = "Single day points changes in S&P")
GSPCpc %>%
ggplot(aes(x = date, y = change, color = abs(change)))+
geom_line()+
theme_minimal()+
scale_color_gradient(low = "grey", high = "red")+
labs(title = "Single day points changes in S&P",
color = "Absolute change")
GSPCpc %>%
ggplot(aes(x = date, y = change, color = abs(change)))+
geom_line()+
theme_minimal()+
scale_color_gradient(low = "grey", high = "red")+
labs(title = "Single day points changes in S&P",
color = "Magnitude")
GSPCpc %>%
ggplot(aes(x = date, y = perc_change, color = abs(perc_change)))+
geom_line()+
theme_minimal()+
scale_color_gradient(low = "grey", high = "red")+
labs(title = "Single day PERCENTAGE changes in S&P",
color = "Magnitude",
y = "% change")
GSPC15 %>%
ggplot(aes(x = date, y = perc_change, color = abs(perc_change)))+
geom_line()+
theme_minimal()+
scale_color_gradient(low = "grey", high = "red")+
labs(title = "Single day PERCENTAGE changes in S&P",
color = "Magnitude",
y = "% change")
GSPCpc %>%
ggplot(aes(x = date, y = change, color = abs(change)))+
geom_line()+
theme_minimal()+
scale_color_gradient(low = "grey", high = "red")+
labs(title = "Single day POINTS changes in S&P",
color = "Magnitude")
GSPC15 %>%
ggplot(aes(x = date, y = perc_change, color = abs(perc_change)))+
geom_line()+
theme_minimal()+
scale_color_gradient(low = "grey", high = "red")+
labs(title = "Rolling 15-day PERCENTAGE changes in S&P",
color = "Magnitude",
y = "% change")
GSPC15
